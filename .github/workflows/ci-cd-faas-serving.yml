name: CI/CD for Online Inference with FaaS

on:
  push:
    branches:
      - main

jobs:
  inference-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Python setup
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY }}
          aws-region: us-east-1
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ vars.ECR_URL }}
      - name: Create ECR repository
        run: |
          REPO_NAME="utec-mlops/${{ github.actor }}/online-prediction-faas"
          EXISTING_REPO=$(aws ecr describe-repositories --repository-name "$REPO_NAME" 2>&1 || echo "NOT_FOUND")
          if [[ "$EXISTING_REPO" == *"RepositoryNotFoundException"* ]]; then
            echo "Repository does not exist. Creating..."
            aws ecr create-repository --repository-name "$REPO_NAME"
          else
            echo "Repository exists."
          fi
      - name: Build image
        run: docker build -t "utec-mlops/${{ github.actor }}/online-prediction-faas" operation/online_inference_faas
      - name: Tag image
        run: docker tag "utec-mlops/${{ github.actor }}/online-prediction-faas:latest" "${{ vars.ECR_URL }}/utec-mlops/${{ github.actor }}/online-prediction-faas:latest"
      - name: Push image
        run: docker push "${{ vars.ECR_URL }}/utec-mlops/${{ github.actor }}/online-prediction-faas:latest"
      - name: Create Lambda function
        run: aws lambda create-function \
            --function-name "mlops-utec-${{ github.actor }}-online-prediction-faas" \
            --package-type Image \
            --code ImageUri="${{ vars.ECR_URL }}/utec-mlops/${{ github.actor }}/online-prediction-faas:latest" \
            --role ${{ vars.LAMBDA_ROLE }} \
            --architectures x86_64 \
            --region us-east-1 \
            --timeout 120